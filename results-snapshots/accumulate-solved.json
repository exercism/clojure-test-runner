{
  "status": "pass",
  "tests": [
    {
      "name": "empty-accumulation",
      "status": "pass",
      "test_code": "(is (= [] (accumulate/accumulate square [])))"
    },
    {
      "name": "accumulate-squares",
      "status": "pass",
      "test_code": "(is (= [1 4 9] (accumulate/accumulate square [1 2 3])))"
    },
    {
      "name": "accumulate-upcases",
      "status": "pass",
      "test_code": "(is (= [\"HELLO\" \"WORLD\"] (->> [\"hello\" \"world\"] (accumulate/accumulate clojure.string/upper-case) (map to-s))))"
    },
    {
      "name": "accumulate-reversed-strings",
      "status": "pass",
      "test_code": "(is (= [\"eht\" \"kciuq\" \"nworb\" \"xof\" \"cte\"] (->> [\"the\" \"quick\" \"brown\" \"fox\" \"etc\"] (accumulate/accumulate reverse) (map to-s))))"
    },
    {
      "name": "accumulate-recursively",
      "status": "pass",
      "test_code": "(is (= [[\"a1\" \"a2\" \"a3\"] [\"b1\" \"b2\" \"b3\"] [\"c1\" \"c2\" \"c3\"]] (-> (fn* [p1__2969#] (accumulate/accumulate (fn [n] (str p1__2969# n)) [1 2 3])) (accumulate/accumulate \"abc\"))))"
    }
  ],
  "version": 3
}
