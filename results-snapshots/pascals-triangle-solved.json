{
  "status": "pass",
  "tests": [
    {
      "name": "test-one-row",
      "status": "pass",
      "test_code": "(testing \"First row\" (is (= (take 1 triangle) [[1]])))"
    },
    {
      "name": "test-two-rows",
      "status": "pass",
      "test_code": "(testing \"First two rows\" (is (= (take 2 triangle) [[1] [1 1]])))"
    },
    {
      "name": "test-three-rows",
      "status": "pass",
      "test_code": "(testing \"First 3 rows\" (is (= (take 3 triangle) [[1] [1 1] [1 2 1]])))"
    },
    {
      "name": "test-third-row",
      "status": "pass",
      "test_code": "(testing \"Third row\" (is (= (row 3) [1 2 1])))"
    },
    {
      "name": "test-fourth-row",
      "status": "pass",
      "test_code": "(testing \"Fourth row\" (is (= (row 4) [1 3 3 1])))"
    },
    {
      "name": "test-fifth-row",
      "status": "pass",
      "test_code": "(testing \"Fifth row\" (is (= (row 5) [1 4 6 4 1])))"
    },
    {
      "name": "triangle-20th-row",
      "status": "pass",
      "test_code": "(testing \"20th row\" (is (= (row 20) (let [v [1 19 171 969 3876 11628 27132 50388 75582 92378]] (into v (rseq v))))))"
    },
    {
      "name": "triangle-300th-row",
      "status": "pass",
      "test_code": "(testing \"300th row\" (is (some? (some #{768408467483699505953134992026497450726137182648496343119395977464120N} (row 300)))))"
    }
  ],
  "version": 2
}
