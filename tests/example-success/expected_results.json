{
  "version" : 2,
  "status" : "pass",
  "tests" : [ {
    "name" : "year-not-divisible-by-4",
    "status" : "pass",
    "test_code" : "(defn leap-year? [year]\n  (let [[p c s] (map #(= 0 (rem year %1)) [4 100 400])]\n    (or (and p (not c))\n        (and c s))))"
  }, {
    "name" : "year-divisible-by-2-but-not-4",
    "status" : "pass",
    "test_code" : "(defn leap-year? [year]\n  (let [[p c s] (map #(= 0 (rem year %1)) [4 100 400])]\n    (or (and p (not c))\n        (and c s))))"
  }, {
    "name" : "year-divisible-by-4-but-not-100",
    "status" : "pass",
    "test_code" : "(defn leap-year? [year]\n  (let [[p c s] (map #(= 0 (rem year %1)) [4 100 400])]\n    (or (and p (not c))\n        (and c s))))"
  }, {
    "name" : "year-divisible-by-4-and-5",
    "status" : "pass",
    "test_code" : "(defn leap-year? [year]\n  (let [[p c s] (map #(= 0 (rem year %1)) [4 100 400])]\n    (or (and p (not c))\n        (and c s))))"
  }, {
    "name" : "year-divisible-by-100-but-not-400",
    "status" : "pass",
    "test_code" : "(defn leap-year? [year]\n  (let [[p c s] (map #(= 0 (rem year %1)) [4 100 400])]\n    (or (and p (not c))\n        (and c s))))"
  }, {
    "name" : "year-divisible-by-100-but-not-by-3",
    "status" : "pass",
    "test_code" : "(defn leap-year? [year]\n  (let [[p c s] (map #(= 0 (rem year %1)) [4 100 400])]\n    (or (and p (not c))\n        (and c s))))"
  }, {
    "name" : "year-divisible-by-400",
    "status" : "pass",
    "test_code" : "(defn leap-year? [year]\n  (let [[p c s] (map #(= 0 (rem year %1)) [4 100 400])]\n    (or (and p (not c))\n        (and c s))))"
  }, {
    "name" : "year-divisible-by-400-but-not-125",
    "status" : "pass",
    "test_code" : "(defn leap-year? [year]\n  (let [[p c s] (map #(= 0 (rem year %1)) [4 100 400])]\n    (or (and p (not c))\n        (and c s))))"
  }, {
    "name" : "year-divisible-by-200-but-not-by-400",
    "status" : "pass",
    "test_code" : "(defn leap-year? [year]\n  (let [[p c s] (map #(= 0 (rem year %1)) [4 100 400])]\n    (or (and p (not c))\n        (and c s))))"
  } ]
}
